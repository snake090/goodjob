package com.goodjob.view;

/**
 * 注文受付票の検索を行うサーブレット
 * @author 福田航平
 * @version 1.0.0
 */

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.goodjob.dto.Member;
import com.goodjob.dto.Order;
import com.goodjob.dto.OrderSheet;

/**
 * Servlet implementation class OrderSearchServlet
 */
@WebServlet("/ordersearch")
public class OrderSearchServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * ordersearch.jspからPOSTを受け取り検索。結果をセッションに保存し結果画面にリダイレクトする
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		HttpSession session = request.getSession();		// 新規セッション作成。既にあれば既存セッションを返す
		if(session.getAttribute("msg") != null) {		// セッションにエラーメッセージがあればremoveする
			session.removeAttribute("msg");
		}
		String memberSql = "SELECT M.MEMBER_ID, M.MEMBER_NUMBER, M.COMPANY_ID,"
					+ " M.NAME, M.FURIGANA, M.JOB, M.PHONE_NUMBER, M.CATEGORY,"
					+ "M.ENTRY_DATE, M.CREDIT_AMOUNT, M.NOTES, C.COMPANY_NAME"
					+ " FROM MEMBER M, COMPANY C";
		String memberWhere = "";
		String orderWhere = "";
		List<OrderSheet> resultOSL = new ArrayList<OrderSheet>();		// OSL = OrderSheetList
		List<OrderSheet> memberOSL = new ArrayList<OrderSheet>();
		List<OrderSheet> orderOSL = new ArrayList<OrderSheet>();
		String sMinDate = request.getParameter("date_min");				// リクエストを受け取りそれぞれ変数へ
		String sMaxDate = request.getParameter("date_max");
		String staff = request.getParameter("staff");
		String company_name = request.getParameter("company_name");
		String member_number = request.getParameter("member_number");
		String name = request.getParameter("name");
		String order_id = request.getParameter("order_id");
		boolean isCheck = false;										// 検索条件が入力されたかを判定する変数
		String msg = "";

		try {		// 入力されている項目をWHERE句へ
			if(!sMinDate.equals("") || !sMaxDate.equals("")) {			// 注文日に条件が入力されていた場合
				if(!sMinDate.equals("") && !sMaxDate.equals("")) {		// 下限・上限ともに入力されているとき
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					Date minDate = sdf.parse(sMinDate);
					Date maxDate = sdf.parse(sMaxDate);
					if(minDate.compareTo(maxDate) > 0) {		// 下限が上限より未来の日付なら不正な値とみなす
						throw new NumberFormatException();
					}
				}
				orderWhere += addWhereOrAnd(orderWhere);
				if(sMinDate.equals("")) {
					if(!sMaxDate.equals("")) {			// ○注文日上限 ×注文日下限
						orderWhere += "order_date <= DATE'" + sMaxDate + "'";
					}
				} else {
					orderWhere +="order_date >=  DATE'" + sMinDate + "'";		// ？注文日上限 ○注文日下限
					if(!sMaxDate.equals("")) {			// ○注文日上限 ○注文日下限
						orderWhere += addWhereOrAnd(orderWhere) + "order_date <= DATE'" + sMaxDate + "'";
					}
				}
				isCheck = true;
			}
			if(!staff.equals("")) {					// 担当者に条件が入力されていた場合
				orderWhere += addWhereOrAnd(orderWhere);
				orderWhere += "order_staff LIKE '%" + staff + "%'";
				isCheck = true;
			}
			if(!company_name.equals("")) {			// 企業名に条件が入力されていた場合
				memberWhere += addWhereOrAnd(memberWhere);
				memberWhere += "C.company_name LIKE '%" + company_name + "%'";
				isCheck = true;
			}
			if(!member_number.equals("")) {			// 会員番号に条件が入力されていた場合
				member_number = request.getParameter("member_number");
				memberWhere += addWhereOrAnd(memberWhere);
				memberWhere += "M.member_number = " + Integer.parseInt(member_number);
				isCheck = true;
			}
			if(!name.equals("")) {					// 会員名に条件が入力されていた場合
				memberWhere += addWhereOrAnd(memberWhere);
				memberWhere += "M.name LIKE '%" + name + "%'";
				isCheck = true;
			}
			if(!order_id.equals("")) {				// 注文受付票番号に条件が入力されていた場合
				orderWhere += addWhereOrAnd(orderWhere);
				orderWhere += "order_id = " + Long.parseLong(order_id);
				isCheck = true;
			}
		} catch(NullPointerException e) {
			memberWhere = "";
			orderWhere = "";
		} catch(NumberFormatException e) {
			msg = "入力された値が不正です。";
		} catch(Exception e) {
			msg = "エラー：" + e;
		}

		if(isCheck && msg.equals("")) {		// いずれかの項目に入力がされている かつ エラーがないとき
			if(memberWhere.equals("") == false) {		// 会員テーブルから検索するとき
				List<Member> memberList = com.goodjob.dao.MemberDAO.memberSearchExecuteQuery(
						memberSql + memberWhere + " AND M.COMPANY_ID=C.COMPANY_ID");
				if(memberList.size() != 0) {
					for(Member m : memberList) {	// 会員情報を注文受付票リストにセット
						List<Order> mo = com.goodjob.dao.OrderSearchDao.executeQuery(	// 会員コードから注文情報を取得
							" WHERE member_id = " + m.getMember_id());
						for(Order o : mo) {
							OrderSheet mOS = new OrderSheet();		// mOS = memberOrderSheet
							mOS.setOrder(o);
							mOS.setProductList(com.goodjob.dao.OrderItemDao.searchProduct(o.getOrder_id()));	// 注文コードから注文商品情報を取得
							mOS.setMember(m);		// ヒットした注文受付票ごとに会員情報をセット
							memberOSL.add(mOS);
						}
					}
				}
			}

			if(orderWhere.equals("") == false) {		// 注文テーブルから検索するとき
				List<Order> orderList = com.goodjob.dao.OrderSearchDao.executeQuery(orderWhere);
				if(orderList.size() != 0) {
					for(Order o : orderList) {	// 会員情報を注文受付票リストにセット
						OrderSheet oOS = new OrderSheet();		// mOS = memberOrderSheet
						oOS.setOrder(o);
						oOS.setProductList(com.goodjob.dao.OrderItemDao.searchProduct(o.getOrder_id()));	// 注文コードから注文商品情報を取得
						oOS.setMember(com.goodjob.dao.MemberDAO.memberSearchExecuteQuery(memberSql
								+ " WHERE member_id = " + o.getMember_id() + " AND M.COMPANY_ID=C.COMPANY_ID").get(0));	// 会員コードから会員情報を取得
						orderOSL.add(oOS);
					}
				}
			}

			if(!memberWhere.equals("") && !orderWhere.equals("")) {		// 会員の結果と注文の結果で重複するものを結果リストに追加
				for(OrderSheet mos : memberOSL) {
					for(OrderSheet oos : orderOSL) {
						if(mos.getOrder().getOrder_id() == oos.getOrder().getOrder_id()) {
							resultOSL.add(mos);
						}
					}
				}
			}else if(!memberWhere.equals("")) {		// 会員のリストしかなければそのまま結果リストへ
				for(OrderSheet mos : memberOSL) {
					resultOSL.add(mos);
				}
			}else if(!orderWhere.equals("")) {		// 注文のリストしかなければそのまま結果リストへ
				for(OrderSheet oos : orderOSL) {
					resultOSL.add(oos);
				}
			}

			session.setAttribute("resultList", resultOSL);		// 結果リストをセッションへ保存
			response.sendRedirect("orderview/ordersearchresult.jsp");	// 検索結果画面へリダイレクト

		}else {
			if(msg.equals("")) {			// 検索条件に入力がなかったとき
				msg = "検索条件を入力してください。";
			}
			session.setAttribute("msg", msg);		// エラーメッセージをセッションに保存
			response.sendRedirect(("orderview/ordersearch.jsp"));	// 検索画面へリダイレクト
		}
	}

	/**
	 * WHERE句を受け取りWHEREかANDを追加するメソッド
	 * @param where String
	 * @return " WHERE "または" AND " String
	 */
	private String addWhereOrAnd(String where) {
		if(where.equals("")) {
			return " WHERE ";
		} else {
			return " AND ";
		}
	}
}